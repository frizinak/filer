<?php
define('FILER_CRON', 'filer:');
define('FILER_PAGE_URL', 'admin/structure/filer');

define('FILER_STATUS_FIRST','first');
define('FILER_STATUS_LAST','last');
define('FILER_STATUS_MANUAL','manual');

/**
 * Implements hook_cron_queue_info().
 */
function filer_cron_queue_info() {
  $queues = array();
  foreach (Filer::getNames() as $name) {
    $queues[FILER_CRON . $name] = array(
      'worker callback' => 'filer_cron_callback',
      'time' => 30,
    );
  }
  return $queues;
}

/**
 * Main cron callback.
 */
function filer_cron_callback($data) {
  // Ignore invalid queue items.
  foreach (array('name', 'frid', 'item', 'append', 'read', 'status') as $key) {
    if (!array_key_exists($key, $data)) {
      watchdog('filer', 'data passed to filer_cron_callback is incomplete.', $data);
      return;
    }
  }
  // Create a new Filer object and pass DrupalQueue data to Filer::_run().
  $filer = new Filer($data['name']);
  $filer->_run($data['frid'], $data['item'], $data['status'], $data['append'], $data['read']);
}

/**
 * Implements hook_permission().
 */
function filer_permission() {
  $perms = array();
  $perms['view filer'] = array('title' => t('View filers overview'));
  foreach (Filer::getNames(TRUE, TRUE) as $filerName) {
    $replace = array('%name' => $filerName);
    $perms['view ' . $filerName] = array('title' => t('View %name files.', $replace));
    $perms['view temp ' . $filerName] = array('title' => t('View temporary %name files.', $replace));
    $perms['delete ' . $filerName] = array('title' => t('Delete %name files.', $replace));
    $perms['clear ' . $filerName . ' queue'] = array('title' => t('Clear the %name queue.', $replace));
    $perms['batch process ' . $filerName] = array('title' => t('Batch process %name queue.', $replace));
    $perms['download ' . $filerName] = array('title' => t('Download private %name files.', $replace));
  }

  return $perms;
}

/**
 * Implements hook_file_download
 */
function filer_file_download($uri) {
  // Once a user has download permissions on a Filer all of its files will be downloadable by that user,
  // even though he might have no download permissions for another Filer that uses the same uri.

  // @todo: any way to make this call less heavy?
  $filerNames = Filer::getNames(TRUE, TRUE, $uri);
  // Nothing to do with us, let it go.
  if (empty($filerNames))
    return NULL;
  // One of ours, check if user has download permissions.
  foreach ($filerNames as $filerName) {
    if (user_access('download ' . $filerName)) {
      return array('Content-Type' => file_get_mimetype($uri));
    }
  }
  // Still here? No permission.
  return -1;
}

/**
 * Implements hook_menu().
 */
function filer_menu() {
  $page_arg_offset = preg_match_all('/\//', FILER_PAGE_URL, $matches) + 1;
  $items[FILER_PAGE_URL] = array(
    'title' => 'Filers',
    'page callback' => 'filer_files_page',
    'access arguments' => array('view filer')
  );

  $items[FILER_PAGE_URL . '/%filer_filer'] = array(
    'title' => 'Filer',
    'title callback' => 'filer_files_page_title',
    'title arguments' => array($page_arg_offset),
    'page callback' => 'filer_files_page',
    'page arguments' => array($page_arg_offset),
    'access arguments' => array('view filer')
  );

  $items[FILER_PAGE_URL . '/%filer_filer/delete/%'] = array(
    'title' => 'Delete Filer file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filer_delete_file_form', $page_arg_offset, $page_arg_offset + 2),
    'access arguments' => array('view filer'),
    'type' => MENU_CALLBACK,
    'file' => 'filer.forms.inc'
  );

  $items[FILER_PAGE_URL . '/%filer_filer/clear'] = array(
    'title' => 'Clear queue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filer_clear_queue_form', $page_arg_offset),
    'access arguments' => array('view filer'),
    'type' => MENU_CALLBACK,
    'file' => 'filer.forms.inc'
  );

  $items[FILER_PAGE_URL . '/%filer_filer/batch'] = array(
    'title' => 'Batch process queue',
    'page callback' => 'filer_process_cron_queue',
    'page arguments' => array($page_arg_offset),
    'access arguments' => array('view filer'),
    'type' => MENU_CALLBACK,
    'file' => 'filer.forms.inc'
  );

  return $items;
}

/**
 * Menu object loader (%filer_filer'). Chose <MODULE>_<CLASS>_load since filer_load() would implement hook_load().
 *
 * @todo Right choice?
 */
function filer_filer_load($filerName) {
  return new Filer($filerName);
}

function filer_files_page_title($filer) {
  return 'Filer: ' . $filer->name;
}

/**
 * Uses the batch API to process the cron queue.
 */
function filer_process_cron_queue($filer) {
  if (!user_access('batch process ' . $filer->name)) {
    return MENU_ACCESS_DENIED;
  }
  $batch = array(
    'title' => t('Processing data for Filer: ' . $filer->name),
    'operations' => array(array('filer_batch_callback', array(FILER_CRON . $filer->name))),
    'finished' => 'filer_batch_finished',
  );
  batch_set($batch);
  batch_process(FILER_PAGE_URL);
  return '';
}

/**
 * Batch callback.
 */
function filer_batch_callback($queue_name, &$context) {
  $queues = module_invoke_all('cron_queue_info');
  drupal_alter('cron_queue_info', $queues);
  if (!isset($queues[$queue_name])) {
    return;
  }
  $info = $queues[$queue_name];
  $queue = DrupalQueue::get($queue_name);
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['total'] = $queue->numberOfItems();
  }
  $function = $info['worker callback'];
  $end = time() + 5;
  while (time() < $end) {
    if ($item = $queue->claimItem()) {
      $function($item->data);
      $queue->deleteItem($item);
      $context['sandbox']['progress']++;
      $context['finished'] = empty($context['sandbox']['total']) ? 1 : $context['sandbox']['progress'] / $context['sandbox']['total'];
      return;
    }
  }
  // Unable to claim item within 5 seconds.
  // @todo show error
  $context['finished'] = 1;
}

/**
 * Batch finished callback, required but not used for the time being.
 */
function filer_batch_finished($success, $results, $operations) {
}

/**
 * Page callback for admin/content/filer(/FILER_NAME).
 */
function filer_files_page($filer = NULL) {
  if ($filer instanceof Filer) {
    if (!user_access('view ' . $filer->name)) {
      return MENU_ACCESS_DENIED;
    }
    if (empty($filer->files))
      drupal_goto(FILER_PAGE_URL);
    return theme('table', filer_files_page_prepare_table($filer->files));
  }
  else {
    $tables = '';
    foreach (Filer::getNames(TRUE, TRUE) as $filerName) {
      if (user_access('view ' . $filerName)) {
        $filer = new Filer($filerName);
        $files = $filer->files;
        $remaining = $filer->numberOfItems();
        $tables .= l($filerName, FILER_PAGE_URL . '/' . $filerName, array('html' => TRUE));
        if ($remaining > 0) {
          $tables .= ' (' . t('!items items remaining', array('!items' => $remaining)) . ')';
          if (user_access('batch process ' . $filerName)) {
            $tables .= ' | ' . l(t('Run batch'), FILER_PAGE_URL . '/' . $filerName . '/batch', array('html' => TRUE));
          }
          if (user_access('clear ' . $filerName . ' queue')) {
            $opts = array('html' => TRUE, 'query' => array('destination' => FILER_PAGE_URL . '/' . $filerName));
            $tables .= ' | ' . l(t('Clear queue', array('%name' => $filerName)), FILER_PAGE_URL . '/' . $filerName . '/clear', $opts);
          }
        }
        $tables .= theme('table', filer_files_page_prepare_table($files));
      }
    }
    return empty($tables) ? 'No Filers.' : $tables;
  }
}

/**
 * Converts an array of FilerFiles to clean table rows.
 */
function filer_files_page_prepare_table($files) {
  $header = array(t('Filer id'), t('Name'), t('File'), t('Date finished'), t('Queued'), t('Actions'));
  $rows = array();
  foreach ($files as $row) {
    if (empty($row['finished'])) {
      if (!user_access('view temp ' . $row['name']))
        continue;
      $row['finished'] = t('not finished');
      $row['actions'] = '-';
    }
    else {
      $row['file'] = l($row['file'], file_create_url($row['file']));
      $row['finished'] = format_date($row['finished'], 'medium');
      $opts = array('query' => array('destination' => FILER_PAGE_URL . '/' . $row['name']));
      if (user_access('delete ' . $row['name'])) {
        $row['actions'] = l(t('delete'), FILER_PAGE_URL . '/' . $row['name'] . '/delete/' . $row['frid'], $opts);
      }
      else {
        $row['actions'] = '-';
      }
    }
    $row['queued'] = $row['queued'] ? t('Yes') : t('No');
    $rows[] = $row;
  }
  return array('header' => $header, 'rows' => $rows);
}
